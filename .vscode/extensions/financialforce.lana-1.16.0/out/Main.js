"use strict";var e=require("vscode"),t=require("fs"),i=require("fs/promises"),s=require("os"),o=require("path");const a="Lana";let Command=class Command{static commandPrefix="lana.";name;fullName;title;run;constructor(e,t,i){this.name=e,this.fullName=Command.commandPrefix+this.name,this.title=t,this.run=i}register(t){let i=e.commands.registerCommand(this.fullName,this.run);return t.context.subscriptions.push(i),this}};let Item=class Item{label;description;detail;picked;alwaysShow;constructor(e,t,i,s=!0,o=!1){this.label=e,this.description=t,this.detail=i,this.picked=o,this.alwaysShow=s}};let Options=class Options{canPickMany;ignoreFocusOut;placeHolder;constructor(e,t=!1,i=!1){this.placeHolder=e,this.ignoreFocusOut=t,this.canPickMany=i}};let QuickPick=class QuickPick{static async pick(e,t){return QuickPick.showQuickPick(e,t).then(e=>e?t.canPickMany?e:[e]:[])}static async showQuickPick(t,i){return e.window.showQuickPick(t,i,void 0)}};let OpenFileInPackage=class OpenFileInPackage{static async openFileForSymbol(t,i,s){let a=await t.findSymbol(i);if(!a.length)return;let n=t.workspaces.filter(e=>{if(a.findIndex(t=>t.startsWith(e.path()))>-1)return e}),[r]=n.length>1?await QuickPick.pick(n.map(e=>new Item(e.name(),e.path(),"")),new Options("Select a workspace:")):[new Item(n[0]?.name()||"",n[0]?.path()||"","")];if(r&&s){let t=new e.Position(s-1,0),i={preserveFocus:!1,preview:!1,viewColumn:e.ViewColumn.Active,selection:new e.Selection(t,t)},n=r.description.trim(),l=a.find(e=>e.startsWith(n+o.sep))||"";e.commands.executeCommand("vscode.open",e.Uri.file(l),i)}}};let WebView=class WebView{static apply(t,i,s){return e.window.createWebviewPanel(t,i,-1,new WebViewOptions(s))}};let WebViewOptions=class WebViewOptions{enableCommandUris=!0;enableScripts=!0;retainContextWhenHidden=!0;localResourceRoots;enableFindWidget=!1;constructor(e){this.localResourceRoots=e}};let LogView=class LogView{static helpUrl="https://certinia.github.io/debug-log-analyzer/";static async createView(t,a,n,r){let l=WebView.apply("logFile",o.basename(n||""),[e.Uri.file(o.join(t.context.extensionPath,"out")),e.Uri.file(o.dirname(n||""))]),c=o.join(t.context.extensionPath,"out"),d=o.join(c,"index.html"),w=l.webview.asWebviewUri(e.Uri.file(o.join(c,"bundle.js"))),p=await this.getFile(d),u={"${extensionRoot}":l.webview.asWebviewUri(e.Uri.file(o.join(c))).toString(),"bundle.js":w.toString(!0)};return l.iconPath=e.Uri.file(o.join(c,"certinia-icon-color.png")),l.webview.html=p.replace(/bundle.js|\${extensionRoot}/gi,function(e){return u[e]||""}),l.webview.onDidReceiveMessage(async c=>{let{cmd:d,requestId:w,payload:p}=c;switch(d){case"fetchLog":await a,LogView.sendLog(w,l,t,n,r);break;case"openPath":p&&t.display.showFile(p);break;case"openType":{let{typeName:e}=p;if(e){let i;let[s,o]=e.split("-");o&&(i=parseInt(o)),OpenFileInPackage.openFileForSymbol(t,s||"",i)}break}case"openHelp":e.commands.executeCommand("vscode.open",e.Uri.parse(this.helpUrl));break;case"getConfig":l.webview.postMessage({requestId:w,cmd:"getConfig",payload:e.workspace.getConfiguration("lana")});break;case"saveFile":{let{fileContent:t,options:a}=p;if(t&&a?.defaultFileName){let n=(e.workspace.workspaceFolders||[])[0],r=n?.uri.path||s.homedir(),l=await e.window.showSaveDialog({defaultUri:e.Uri.file(o.join(r,a.defaultFileName))});l&&i.writeFile(l.fsPath,t).catch(t=>{let i=t instanceof Error?t.message:String(t);e.window.showErrorMessage(`Unable to save file: ${i}`)})}break}case"showError":{let{text:t}=p;t&&e.window.showErrorMessage(t)}}},void 0,[]),l}static async getFile(e){let i="";return new Promise((s,o)=>{t.createReadStream(e).on("error",e=>{o(e)}).on("data",e=>{i+=e}).on("end",()=>{s(i)})})}static sendLog(i,s,a,n,r){r||t.existsSync(n||"")||a.display.showErrorMessage("Log file could not be found.",{modal:!0});let l=o.parse(n||"");s.webview.postMessage({requestId:i,cmd:"fetchLog",payload:{logName:l.name,logUri:n?s.webview.asWebviewUri(e.Uri.file(n)).toString(!0):"",logPath:n,logData:r}})}};let ShowLogAnalysis=class ShowLogAnalysis{static getCommand(e){return new Command("showLogAnalysis","Log: Show Apex Log Analysis",t=>ShowLogAnalysis.safeCommand(e,t))}static apply(e){ShowLogAnalysis.getCommand(e).register(e),e.display.output(`Registered command '${a}: Show Log'`)}static async safeCommand(e,t){try{return ShowLogAnalysis.command(e,t)}catch(i){let t=i instanceof Error?i.message:String(i);return e.display.showErrorMessage(`Error showing logfile: ${t}`),Promise.resolve()}}static async command(i,s){let o=s?.fsPath||e.window?.activeTextEditor?.document.fileName||"",a=t.existsSync(o)?"":e.window?.activeTextEditor?.document.getText();if(o||a)LogView.createView(i,Promise.resolve(),o,a);else throw i.display.showErrorMessage("No file selected or the file is too large. Try again using the file explorer or text editor command."),Error("No file selected or the file is too large. Try again using the file explorer or text editor command.")}};let ShowAnalysisCodeLens=class ShowAnalysisCodeLens{context;constructor(e){this.context=e}async provideCodeLenses(t){let i=new e.Range(0,0,0,0),s=ShowLogAnalysis.getCommand(this.context);return[new e.CodeLens(i,{command:s.fullName,title:s.title})]}static apply(t){let i=e.languages.registerCodeLensProvider([{scheme:"file",language:"apexlog"}],new ShowAnalysisCodeLens(t));t.context.subscriptions.push(i)}};let QuickPickWorkspace=class QuickPickWorkspace{static async pickOrReturn(t){if(t.workspaces.length>1){let[e]=await QuickPick.pick(t.workspaces.map(e=>new Item(e.name(),e.path(),"")),new Options("Select a workspace:"));if(e)return e.description;throw Error("No workspace selected")}if(1===t.workspaces.length)return t.workspaces[0]?.path()||"";if(e.window.activeTextEditor)return o.parse(e.window.activeTextEditor.document.fileName).dir;throw Error("No workspace selected")}};let GetLogFile=class GetLogFile{static async apply(e,t,i){let{AuthHelper:s}=await Promise.resolve().then(function(){return require("./lana-index.js")}).then(function(e){return e.index}),o=await s.instance(e),a=await o.connect(await o.getDefaultUsername());if(a){let{LogService:e}=await Promise.resolve().then(function(){return require("./lana-index2.js")}).then(function(e){return e.index});await new e(a).getLogs({logId:i,outputDir:t})}return new Promise(e=>e())}};let GetLogFiles=class GetLogFiles{static async apply(e){let{AuthHelper:t}=await Promise.resolve().then(function(){return require("./lana-index.js")}).then(function(e){return e.index}),i=await t.instance(e),s=await i.connect(await i.getDefaultUsername());if(s){let{LogService:e}=await Promise.resolve().then(function(){return require("./lana-index2.js")}).then(function(e){return e.index});return new e(s).getLogRecords()}return[]}};let DebugLogItem=class DebugLogItem extends Item{logId;constructor(e,t,i,s,o=!0,a=!1){super(e,t,i,o,a),this.logId=s}};let RetrieveLogFile=class RetrieveLogFile{static apply(e){new Command("retrieveLogFile","Log: Retrieve Apex Log And Show Analysis",()=>RetrieveLogFile.safeCommand(e)).register(e),e.display.output(`Registered command '${a}: Retrieve Log'`)}static async safeCommand(e){try{return RetrieveLogFile.command(e)}catch(i){let t=i instanceof Error?i.message:String(i);return e.display.showErrorMessage(`Error loading logfile: ${t}`),Promise.resolve()}}static async command(e){let t=await QuickPickWorkspace.pickOrReturn(e),[i]=await Promise.all([GetLogFiles.apply(t),RetrieveLogFile.showLoadingPicker()]),s=await RetrieveLogFile.getLogFile(i);if(s){let i=this.getLogFilePath(t,s),o=this.writeLogFile(t,i);return LogView.createView(e,o,i)}}static async showLoadingPicker(){let t=e.window.createQuickPick();return t.placeholder="Select a logfile",t.busy=!0,t.enabled=!1,t.show(),t}static async getLogFile(e){let t=e.sort((e,t)=>{let i=Date.parse(e.StartTime);return Date.parse(t.StartTime)-i}).map(e=>new DebugLogItem(`${e.LogUser.Name} - ${e.Operation}`,`${(e.LogLength/1024).toFixed(2)} KB ${e.DurationMilliseconds} ms`,`${new Date(e.StartTime).toLocaleString()} - ${e.Status} - ${e.Id}`,e.Id)),[i]=await QuickPick.pick(t,new Options("Select a logfile"));return i?.logId||null}static getLogFilePath(e,t){let i=o.join(e,".sfdx","tools","debug","logs");return o.join(i,`${t}.log`)}static async writeLogFile(e,i){if(!t.existsSync(i)){let t=o.parse(i);await GetLogFile.apply(e,t.dir,t.name)}}};let WhatsNewNotification=class WhatsNewNotification{static async apply(t){let i=t.context.extension,s=i.packageJSON.version.split(/[.-]/),o=s.slice(0,3).join("."),a="update.confirmed.versions",n=t.context.globalState.get(a)||[];if("0"!==s[2]||n.includes(o))return;let r=i.id,l="See What's New";e.window.showInformationMessage("Apex Log Analyzer has been updated. See What's New.",l).then(t=>{t===l&&e.commands.executeCommand("extension.open",r,"changelog")}),t.context.globalState.update(a,[o])}};let SymbolFinder=class SymbolFinder{async findSymbol(e,t){let{Workspaces:i}=await Promise.resolve().then(function(){return require("./lana-apex-ls.js")}).then(function(e){return e.apexLs}),s=[];for(let o of e){let e=i.get(o.path()),a=this.findInWorkspace(e,t);a&&s.push(a)}return s}findInWorkspace(e,t){let i=e.findType(t);if(0===i.length){let i=t.split(".");return i.length>1?(i.pop(),this.findInWorkspace(e,i.join("."))):null}return i.find(e=>e.endsWith(".cls"))||null}};let VSWorkspace=class VSWorkspace{workspaceFolder;constructor(e){this.workspaceFolder=e}path(){return this.workspaceFolder.uri.fsPath}name(){return this.workspaceFolder.name}};let Context=class Context{symbolFinder=new SymbolFinder;context;display;workspaces=[];constructor(t,i){this.context=t,this.display=i,e.workspace.workspaceFolders&&(this.workspaces=e.workspace.workspaceFolders.map(e=>new VSWorkspace(e))),RetrieveLogFile.apply(this),ShowLogAnalysis.apply(this),ShowAnalysisCodeLens.apply(this),WhatsNewNotification.apply(this)}async findSymbol(e){let t=await this.symbolFinder.findSymbol(this.workspaces,e);return t.length||this.display.showErrorMessage(`Type '${e}' was not found in workspace`),t}};let Display=class Display{outputChannel=e.window.createOutputChannel(a);output(e,t=!1){t&&this.outputChannel.show(!0),this.outputChannel.appendLine(e)}showInformationMessage(t){e.window.showInformationMessage(t)}showErrorMessage(t,i={}){e.window.showErrorMessage(t,i)}showFile(t){e.commands.executeCommand("vscode.open",e.Uri.file(t.trim()))}};exports.context=null,exports.activate=function(e){exports.context=new Context(e,new Display)},exports.deactivate=function(){exports.context=null};
